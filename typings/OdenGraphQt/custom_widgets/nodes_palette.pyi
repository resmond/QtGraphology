"""
This type stub file was generated by pyright.
"""

from PySide6 import QtCore, QtWidgets

"""
This type stub file was generated by pyright.
"""
class NodesGridDelagate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):
        """
        Args:
            painter (QtGui.QPainter):
            option (QtGui.QStyleOptionViewItem):
            index (QtCore.QModelIndex):
        """
        ...



class NodesGridProxyModel(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=...) -> None:
        ...

    def mimeData(self, indexes):
        ...



class NodesGridView(QtWidgets.QListView):
    def __init__(self, parent=...) -> None:
        ...

    def clear(self):
        ...

    def add_item(self, label, tooltip=...):
        ...



class NodesPaletteWidget(QtWidgets.QWidget):
    """
    The :class:`QtGraphology.NodesPaletteWidget` is a widget for displaying all
    registered nodes from the node graph in a grid layout with this widget a
    user can create nodes by dragging and dropping.

    | *Implemented on QtGraphology:* ``v0.1.7``

    .. inheritance-diagram:: QtGraphology.NodesPaletteWidget
        :parts: 1

    .. image:: _images/nodes_palette.png
        :width: 400px

    .. code-block:: python
        :linenos:

        from QtGraphology import NodeGraph, NodesPaletteWidget

        # create node graph.
        graph = NodeGraph()

        # create nodes palette widget.
        nodes_palette = NodesPaletteWidget(parent=None, node_graph=graph)
        nodes_palette.show()

    Args:
        parent (QtWidgets.QWidget): parent of the new widget.
        node_graph (QtGraphology.NodeGraph): node graph.
    """
    def __init__(self, parent=..., node_graph=...) -> None:
        ...

    def __repr__(self):
        ...

    def set_category_label(self, category, label):
        """
        Override tab label for a node category tab.

        Args:
            category (str): node identifier category eg. ``"nodes.widgets"``
            label (str): custom display label. eg. ``"Node Widgets"``
        """
        ...

    def tab_widget(self):
        """
        Get the tab widget.

        Returns:
            QtWidgets.QTabWidget: tab widget.
        """
        ...

    def update(self):
        """
        Update and refresh the node palette widget.
        """
        ...
