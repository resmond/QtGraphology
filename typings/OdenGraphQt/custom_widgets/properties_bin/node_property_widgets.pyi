"""
This type stub file was generated by pyright.
"""

from PySide6 import QtWidgets

"""
This type stub file was generated by pyright.
"""
class _PropertiesDelegate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):
        """
        Args:
            painter (QtGui.QPainter):
            option (QtGui.QStyleOptionViewItem):
            index (QtCore.QModelIndex):
        """
        ...



class _PropertiesList(QtWidgets.QTableWidget):
    def __init__(self, parent=...) -> None:
        ...

    def wheelEvent(self, event):
        """
        Args:
            event (QtGui.QWheelEvent):
        """
        ...



class _PropertiesContainer(QtWidgets.QWidget):
    """
    Node properties container widget that displays nodes properties under
    a tab in the ``NodePropWidget`` widget.
    """
    def __init__(self, parent=...) -> None:
        ...

    def __repr__(self):
        ...

    def add_widget(self, name, widget, value, label=..., tooltip=...):
        """
        Add a property widget to the window.

        Args:
            name (str): property name to be displayed.
            widget (BaseProperty): property widget.
            value (object): property value.
            label (str): custom label to display.
            tooltip (str): custom tooltip.
        """
        ...

    def get_widget(self, name):
        """
        Returns the property widget from the name.

        Args:
            name (str): property name.

        Returns:
            QtWidgets.QWidget: property widget.
        """
        ...

    def get_all_widgets(self):
        """
        Returns the node property widgets.

        Returns:
            dict: {name: widget}
        """
        ...



class _PortConnectionsContainer(QtWidgets.QWidget):
    """
    Port connection container widget that displays node ports and connections
    under a tab in the ``NodePropWidget`` widget.
    """
    def __init__(self, parent=..., node=...) -> None:
        ...

    def __repr__(self):
        ...

    def set_lock_controls_disable(self, disable=...):
        """
        Enable/Disable port lock column widgets.

        Args:
            disable (bool): true to disable checkbox.
        """
        ...



class NodePropEditorWidget(QtWidgets.QWidget):
    """
    Node properties editor widget for display a Node object.

    Args:
        parent (QtWidgets.QWidget): parent object.
        node (QtGraphology.NodeObject): node.
    """
    property_changed = ...
    property_closed = ...
    def __init__(self, parent=..., node=...) -> None:
        ...

    def __repr__(self):
        ...

    def node_id(self):
        """
        Returns the node id linked to the widget.

        Returns:
            str: node id
        """
        ...

    def add_widget(self, name, widget, tab=...):
        """
        add new node property widget.

        Args:
            name (str): property name.
            widget (BaseProperty): property widget.
            tab (str): tab name.
        """
        ...

    def add_tab(self, name):
        """
        add a new tab.

        Args:
            name (str): tab name.

        Returns:
            PropListWidget: tab child widget.
        """
        ...

    def get_tab_widget(self):
        """
        Returns the underlying tab widget.

        Returns:
            QtWidgets.QTabWidget: tab widget.
        """
        ...

    def get_widget(self, name: str):
        """
        get property widget.

        Args:
            name (str): property name.

        Returns:
            QtGraphology.custom_widgets.properties_bin.prop_widgets_abstract.BaseProperty: property widget.
        """
        ...

    def get_port_connection_widget(self):
        """
        Returns the ports connections container widget.

        Returns:
            _PortConnectionsContainer: port container widget.
        """
        ...

    def set_port_lock_widgets_disabled(self, disabled=...):
        """
        Enable/Disable port lock column widgets.

        Args:
            disabled (bool): true to disable checkbox.
        """
        ...



class PropertiesBinWidget(QtWidgets.QWidget):
    """
    The :class:`QtGraphology.PropertiesBinWidget` is a list widget for displaying
    and editing a nodes properties.

    .. inheritance-diagram:: QtGraphology.PropertiesBinWidget
        :parts: 1

    .. image:: _images/prop_bin.png
        :width: 950px

    .. code-block:: python
        :linenos:

        from QtGraphology import NodeGraph, PropertiesBinWidget

        # create node graph.
        graph = NodeGraph()

        # create properties bin widget.
        properties_bin = PropertiesBinWidget(parent=None, node_graph=graph)
        properties_bin.show()

    See Also:
            :meth:`QtGraphology.BaseNode.add_custom_widget`,
            :meth:`QtGraphology.NodeObject.create_property`,
            :attr:`QtGraphology.constants.NodePropWidgetEnum`

    Args:
        parent (QtWidgets.QWidget): parent of the new widget.
        node_graph (QtGraphology.NodeGraph): node graph.
    """
    property_changed = ...
    def __init__(self, parent=..., node_graph=...) -> None:
        ...

    def __repr__(self):
        ...

    def create_property_editor(self, node):
        """
        Creates a new property editor widget from the provided node.


        (re-implement for displaying custom node property editor widget.)
        Args:
            node (QtGraphology.NodeObject): node object.

        Returns:
            NodePropEditorWidget: property editor widget.
        """
        ...

    def limit(self):
        """
        Returns the limit for how many nodes can be loaded into the bin.

        Returns:
            int: node limit.
        """
        ...

    def set_limit(self, limit):
        """
        Set limit of nodes to display.

        Args:
            limit (int): node limit.
        """
        ...

    def add_node(self, node):
        """
        Add node to the properties bin.

        Args:
            node (QtGraphology.NodeObject): node object.
        """
        ...

    def remove_node(self, node):
        """
        Remove node from the properties bin.

        Args:
            node (str or QtGraphology.BaseNode): node id or node object.
        """
        ...

    def lock_bin(self):
        """
        Lock/UnLock the properties bin.
        """
        ...

    def clear_bin(self):
        """
        Clear the properties bin.
        """
        ...

    def prop_widget(self, node):
        """
        Returns the node property widget.

        Args:
            node (str or QtGraphology.NodeObject): node id or node object.

        Returns:
            NodePropEditorWidget: node property widget.
        """
        ...
