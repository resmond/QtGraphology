"""
This type stub file was generated by pyright.
"""

from PySide6 import QtWidgets

"""
This type stub file was generated by pyright.
"""
class AbstractNodeItem(QtWidgets.QGraphicsItem):
    """
    The base class of all node qgraphics item.
    """
    def __init__(self, name=..., parent=...) -> None:
        ...

    def __repr__(self):
        ...

    def boundingRect(self):
        ...

    def mousePressEvent(self, event):
        """
        Re-implemented to update "self._properties['selected']" attribute.

        Args:
            event (QtWidgets.QGraphicsSceneMouseEvent): mouse event.
        """
        ...

    def setSelected(self, selected):
        ...

    def draw_node(self):
        """
        Re-draw the node item in the scene with proper
        calculated size and widgets aligned.

        (this is called from the builtin custom widgets.)
        """
        ...

    def pre_init(self, viewer, pos=...):
        """
        Called before node has been added into the scene.

        Args:
            viewer (QtGraphology.widgets.viewer.NodeViewer): main viewer.
            pos (tuple): the cursor pos if node is called with tab search.
        """
        ...

    def post_init(self, viewer, pos=...):
        """
        Called after node has been added into the scene.

        Args:
            viewer (QtGraphology.widgets.viewer.NodeViewer): main viewer
            pos (tuple): the cursor pos if node is called with tab search.
        """
        ...

    @property
    def id(self):
        ...

    @id.setter
    def id(self, unique_id=...):
        ...

    @property
    def type_(self):
        ...

    @type_.setter
    def type_(self, node_type=...):
        ...

    @property
    def layout_direction(self):
        ...

    @layout_direction.setter
    def layout_direction(self, value=...):
        ...

    @property
    def size(self):
        ...

    @property
    def width(self):
        ...

    @width.setter
    def width(self, width=...):
        ...

    @property
    def height(self):
        ...

    @height.setter
    def height(self, height=...):
        ...

    @property
    def color(self):
        ...

    @color.setter
    def color(self, color=...):
        ...

    @property
    def text_color(self):
        ...

    @text_color.setter
    def text_color(self, color=...):
        ...

    @property
    def border_color(self):
        ...

    @border_color.setter
    def border_color(self, color=...):
        ...

    @property
    def disabled(self):
        ...

    @disabled.setter
    def disabled(self, state=...):
        ...

    @property
    def selected(self):
        ...

    @selected.setter
    def selected(self, selected=...):
        ...

    @property
    def visible(self):
        ...

    @visible.setter
    def visible(self, visible=...):
        ...

    @property
    def xy_pos(self):
        """
        return the item scene postion.
        ("node.pos" conflicted with "QGraphicsItem.pos()"
        so it was refactored to "xy_pos".)

        Returns:
            list[float]: x, y scene position.
        """
        ...

    @xy_pos.setter
    def xy_pos(self, pos=...):
        """
        set the item scene postion.
        ("node.pos" conflicted with "QGraphicsItem.pos()"
        so it was refactored to "xy_pos".)

        Args:
            pos (list[float]): x, y scene position.
        """
        ...

    @property
    def name(self):
        ...

    @name.setter
    def name(self, name=...):
        ...

    @property
    def identifier(self):
        ...

    @identifier.setter
    def identifier(self, name=...):
        ...

    @property
    def properties(self):
        """
        return the node view attributes.

        Returns:
            dict: {property_name: property_value}
        """
        ...

    def viewer(self):
        """
        return the main viewer.

        Returns:
            QtGraphology.widgets.viewer.NodeViewer: viewer object.
        """
        ...

    def delete(self):
        """
        remove node view from the scene.
        """
        ...

    def from_dict(self, node_dict):
        """
        set the node view attributes from the dictionary.

        Args:
            node_dict (dict): serialized node dict.
        """
        ...
