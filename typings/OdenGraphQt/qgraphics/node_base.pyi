"""
This type stub file was generated by pyright.
"""

from QtGraphology.qgraphics.node_abstract import AbstractNodeItem

"""
This type stub file was generated by pyright.
"""
class NodeItem(AbstractNodeItem):
    """
    Base Node item.

    Args:
        name (str): name displayed on the node.
        parent (QtWidgets.QGraphicsItem): parent item.
    """
    def __init__(self, name=..., parent=...) -> None:
        ...

    def post_init(self, viewer=..., pos=...):
        """
        Called after node has been added into the scene.

        Args:
            viewer (QtGraphology.widgets.viewer.NodeViewer): main viewer
            pos (tuple): the cursor pos if node is called with tab search.
        """
        ...

    def paint(self, painter, option, widget):
        """
        Draws the node base not the ports.

        Args:
            painter (QtGui.QPainter): painter used for drawing the item.
            option (QtGui.QStyleOptionGraphicsItem):
                used to describe the parameters needed to draw.
            widget (QtWidgets.QWidget): not used.
        """
        ...

    def mousePressEvent(self, event):
        """
        Re-implemented to ignore event if LMB is over port collision area.

        Args:
            event (QtWidgets.QGraphicsSceneMouseEvent): mouse event.
        """
        ...

    def mouseReleaseEvent(self, event):
        """
        Re-implemented to ignore event if Alt modifier is pressed.

        Args:
            event (QtWidgets.QGraphicsSceneMouseEvent): mouse event.
        """
        ...

    def mouseDoubleClickEvent(self, event):
        """
        Re-implemented to emit "node_double_clicked" signal.

        Args:
            event (QtWidgets.QGraphicsSceneMouseEvent): mouse event.
        """
        ...

    def itemChange(self, change, value):
        """
        Re-implemented to update pipes on selection changed.

        Args:
            change:
            value:
        """
        ...

    def activate_pipes(self):
        """
        active pipe color.
        """
        ...

    def highlight_pipes(self):
        """
        Highlight pipe color.
        """
        ...

    def reset_pipes(self):
        """
        Reset all the pipe colors.
        """
        ...

    def calc_size(self, add_w=..., add_h=...):
        """
        Calculates the minimum node size.

        Args:
            add_w (float): additional width.
            add_h (float): additional height.

        Returns:
            tuple(float, float): width, height.
        """
        ...

    def align_icon(self, h_offset=..., v_offset=...):
        """
        Align node icon to the default top left of the node.

        Args:
            v_offset (float): additional vertical offset.
            h_offset (float): additional horizontal offset.
        """
        ...

    def align_label(self, h_offset=..., v_offset=...):
        """
        Center node label text to the top of the node.

        Args:
            v_offset (float): vertical offset.
            h_offset (float): horizontal offset.
        """
        ...

    def align_widgets(self, v_offset=...):
        """
        Align node widgets to the default center of the node.

        Args:
            v_offset (float): vertical offset.
        """
        ...

    def align_ports(self, v_offset=...):
        """
        Align input, output ports in the node layout.

        Args:
            v_offset (float): port vertical offset.
        """
        ...

    def draw_node(self):
        """
        Re-draw the node item in the scene with proper
        calculated size and widgets aligned.
        """
        ...

    def post_init(self, viewer=..., pos=...):
        """
        Called after node has been added into the scene.
        Adjust the node layout and form after the node has been added.

        Args:
            viewer (QtGraphology.widgets.viewer.NodeViewer): not used
            pos (tuple): cursor position.
        """
        ...

    def auto_switch_mode(self):
        """
        Decide whether to draw the node with proxy mode.
        (this is called at the start in the "self.paint()" function.)
        """
        ...

    def set_proxy_mode(self, mode):
        """
        Set whether to draw the node with proxy mode.
        (proxy mode toggles visibility for some qgraphic items in the node.)

        Args:
            mode (bool): true to enable proxy mode.
        """
        ...

    @property
    def icon(self):
        ...

    @icon.setter
    def icon(self, path=...):
        ...

    @AbstractNodeItem.layout_direction.setter
    def layout_direction(self, value=...):
        ...

    @AbstractNodeItem.width.setter
    def width(self, width=...):
        ...

    @AbstractNodeItem.height.setter
    def height(self, height=...):
        ...

    @AbstractNodeItem.disabled.setter
    def disabled(self, state=...):
        ...

    @AbstractNodeItem.selected.setter
    def selected(self, selected=...):
        ...

    @AbstractNodeItem.name.setter
    def name(self, name=...):
        ...

    @AbstractNodeItem.color.setter
    def color(self, color=...):
        ...

    @AbstractNodeItem.text_color.setter
    def text_color(self, color=...):
        ...

    @property
    def text_item(self):
        """
        Get the node name text qgraphics item.

        Returns:
            NodeTextItem: node text object.
        """
        ...

    @property
    def icon_item(self):
        """
        Get the node icon qgraphics item.
        Returns:
            QtWidgets.QGraphicsPixmapItem: node icon object.
        """
        ...

    @property
    def inputs(self):
        """
        Returns:
            list[PortItem]: input port graphic items.
        """
        ...

    @property
    def outputs(self):
        """
        Returns:
            list[PortItem]: output port graphic items.
        """
        ...

    def add_input(self, name=..., multi_port=..., display_name=..., locked=..., painter_func=...):
        """
        Adds a port qgraphics item into the node with the "port_type" set as
        IN_PORT.

        Args:
            name (str): name for the port.
            multi_port (bool): allow multiple connections.
            display_name (bool): display the port name.
            locked (bool): locked state.
            painter_func (function): custom paint function.

        Returns:
            PortItem: input port qgraphics item.
        """
        ...

    def add_output(self, name=..., multi_port=..., display_name=..., locked=..., painter_func=...):
        """
        Adds a port qgraphics item into the node with the "port_type" set as
        OUT_PORT.

        Args:
            name (str): name for the port.
            multi_port (bool): allow multiple connections.
            display_name (bool): display the port name.
            locked (bool): locked state.
            painter_func (function): custom paint function.

        Returns:
            PortItem: output port qgraphics item.
        """
        ...

    def delete_input(self, port):
        """
        Remove input port from node.

        Args:
            port (PortItem): port object.
        """
        ...

    def delete_output(self, port):
        """
        Remove output port from node.

        Args:
            port (PortItem): port object.
        """
        ...

    def get_input_text_item(self, port_item):
        """
        Args:
            port_item (PortItem): port item.

        Returns:
            QGraphicsTextItem: graphic item used for the port text.
        """
        ...

    def get_output_text_item(self, port_item):
        """
        Args:
            port_item (PortItem): port item.

        Returns:
            QGraphicsTextItem: graphic item used for the port text.
        """
        ...

    @property
    def widgets(self):
        ...

    def add_widget(self, widget):
        ...

    def get_widget(self, name):
        ...

    def has_widget(self, name):
        ...

    def from_dict(self, node_dict):
        ...
