"""
This type stub file was generated by pyright.
"""

from PySide6 import QtCore

"""
This type stub file was generated by pyright.
"""
class NodeGraph(QtCore.QObject):
    """
    The ``NodeGraph`` class is the main controller for managing all nodes
    and the node graph.

    .. inheritance-diagram:: QtGraphology.NodeGraph
        :top-classes: PySide6.QtCore.QObject

    .. image:: _images/graph.png
        :width: 60%
    """
    nodes_registered = ...
    node_created = ...
    nodes_deleted = ...
    node_selected = ...
    node_selection_changed = ...
    node_double_clicked = ...
    port_connected = ...
    port_disconnected = ...
    property_changed = ...
    data_dropped = ...
    session_changed = ...
    context_menu_prompt = ...
    def __init__(self, parent=..., **kwargs) -> None:
        """
        Args:
            parent (object): object parent.
            **kwargs (dict): Used for overriding internal objects at init time.
        """
        ...

    def __repr__(self):
        ...

    @property
    def model(self):
        """
        The model used for storing the node graph data.

        Returns:
            QtGraphology.base.model.NodeGraphModel: node graph model.
        """
        ...

    @property
    def node_factory(self):
        """
        Return the node factory object used by the node graph.

        Returns:
            NodeFactory: node factory.
        """
        ...

    @property
    def widget(self):
        """
        The node graph widget for adding into a layout.

        Returns:
            NodeGraphWidget: node graph widget.
        """
        ...

    @property
    def undo_view(self):
        """
        Returns node graph undo history list widget.

        Returns:
            PySide6.QtWidgets.QUndoView: node graph undo view.
        """
        ...

    def cursor_pos(self):
        """
        Returns the cursor last position in the node graph.

        Returns:
            tuple(float, float): cursor x,y coordinates of the scene.
        """
        ...

    def toggle_node_search(self):
        """
        toggle the node search widget visibility.
        """
        ...

    def show(self):
        """
        Show node graph widget this is just a convenience
        function to :meth:`NodeGraph.widget.show()`.
        """
        ...

    def close(self):
        """
        Close node graph NodeViewer widget this is just a convenience
        function to :meth:`NodeGraph.widget.close()`.
        """
        ...

    def viewer(self):
        """
        Returns the internal view interface used by the node graph.

        Warnings:
            Methods in the ``NodeViewer`` are used internally
            by ``QtGraphology`` components to get the widget use
            :attr:`NodeGraph.widget`.

        See Also:
            :attr:`NodeGraph.widget` to add the node graph widget into a
            :class:`PySide6.QtWidgets.QLayout`.

        Returns:
            QtGraphology.widgets.viewer.NodeViewer: viewer interface.
        """
        ...

    def scene(self):
        """
        Returns the ``QGraphicsScene`` object used in the node graph.

        Returns:
            QtGraphology.widgets.scene.NodeScene: node scene.
        """
        ...

    def background_color(self):
        """
        Return the node graph background color.

        Returns:
            tuple: r, g ,b
        """
        ...

    def set_background_color(self, r, g, b):
        """
        Set node graph background color.

        Args:
            r (int): red value.
            g (int): green value.
            b (int): blue value.
        """
        ...

    def grid_color(self):
        """
        Return the node graph grid color.

        Returns:
            tuple: r, g ,b
        """
        ...

    def set_grid_color(self, r, g, b):
        """
        Set node graph grid color.

        Args:
            r (int): red value.
            g (int): green value.
            b (int): blue value.
        """
        ...

    def set_grid_mode(self, mode=...):
        """
        Set node graph background grid mode.

        (default: :attr:`QtGraphology.constants.ViewerEnum.GRID_DISPLAY_LINES`).

        See: :attr:`QtGraphology.constants.ViewerEnum`

        .. code-block:: python
            :linenos:

            graph = NodeGraph()
            graph.set_grid_mode(ViewerEnum.GRID_DISPLAY_DOTS.value)

        Args:
            mode (int): background style.
        """
        ...

    def add_properties_bin(self, prop_bin):
        """
        Wire up a properties bin widget to the node graph.

        Args:
            prop_bin (QtGraphology.PropertiesBinWidget): properties widget.
        """
        ...

    def undo_stack(self):
        """
        Returns the undo stack used in the node graph.

        See Also:
            :meth:`NodeGraph.begin_undo()`,
            :meth:`NodeGraph.end_undo()`

        Returns:
            QtGui.QUndoStack: undo stack.
        """
        ...

    def clear_undo_stack(self):
        """
        Clears the undo stack.

        Note:
            Convenience function to
            :meth:`NodeGraph.undo_stack().clear()`

        See Also:
            :meth:`NodeGraph.begin_undo()`,
            :meth:`NodeGraph.end_undo()`,
            :meth:`NodeGraph.undo_stack()`
        """
        ...

    def begin_undo(self, name):
        """
        Start of an undo block followed by a
        :meth:`NodeGraph.end_undo()`.

        Args:
            name (str): name for the undo block.
        """
        ...

    def end_undo(self):
        """
        End of an undo block started by
        :meth:`NodeGraph.begin_undo()`.
        """
        ...

    def context_menu(self):
        """
        Returns the context menu for the node graph.

        Note:
            This is a convenience function to
            :meth:`NodeGraph.get_context_menu`
            with the arg ``menu="graph"``

        Returns:
            QtGraphology.NodeGraphMenu: context menu object.
        """
        ...

    def context_nodes_menu(self):
        """
        Returns the context menu for the nodes.

        Note:
            This is a convenience function to
            :meth:`NodeGraph.get_context_menu`
            with the arg ``menu="nodes"``

        Returns:
            QtGraphology.NodesMenu: context menu object.
        """
        ...

    def get_context_menu(self, menu):
        """
        Returns the context menu specified by the name.

        menu types:

            - ``"graph"`` context menu from the node graph.
            - ``"nodes"`` context menu for the nodes.

        Args:
            menu (str): menu name.

        Returns:
            QtGraphology.NodeGraphMenu or QtGraphology.NodesMenu: context menu object.
        """
        ...

    def set_context_menu(self, menu_name, data):
        """
        Populate a context menu from serialized data.

        example of serialized menu data:

        .. highlight:: python
        .. code-block:: python

            [
                {
                    'type': 'menu',
                    'label': 'node sub menu',
                    'items': [
                        {
                            'type': 'command',
                            'label': 'test command',
                            'file': '../path/to/my/test_module.py',
                            'function': 'run_test',
                            'node_type': 'QtGraphology.nodes.MyNodeClass'
                        },

                    ]
                },
            ]

        the ``run_test`` example function:

        .. highlight:: python
        .. code-block:: python

            def run_test(graph):
                print(graph.selected_nodes())


        Args:
            menu_name (str): name of the parent context menu to populate under.
            data (dict): serialized menu data.
        """
        ...

    def set_context_menu_from_file(self, file_path, menu=...):
        """
        Populate a context menu from a serialized json file.

        menu types:

            - ``"graph"`` context menu from the node graph.
            - ``"nodes"`` context menu for the nodes.

        Args:
            menu (str): name of the parent context menu to populate under.
            file_path (str): serialized menu commands json file.
        """
        ...

    def disable_context_menu(self, disabled=..., name=...):
        """
        Disable/Enable context menus from the node graph.

        menu types:

            - ``"all"`` all context menus from the node graph.
            - ``"graph"`` context menu from the node graph.
            - ``"nodes"`` context menu for the nodes.

        Args:
            disabled (bool): true to enable context menu.
            name (str): menu name. (default: ``"all"``)
        """
        ...

    def acyclic(self):
        """
        Returns true if the current node graph is acyclic.

        See Also:
            :meth:`NodeGraph.set_acyclic`

        Returns:
            bool: true if acyclic (default: ``True``).
        """
        ...

    def set_acyclic(self, mode=...):
        """
        Enable the node graph to be a acyclic graph. (default: ``True``)

        See Also:
            :meth:`NodeGraph.acyclic`

        Args:
            mode (bool): true to enable acyclic.
        """
        ...

    def pipe_collision(self):
        """
        Returns if pipe collision is enabled.

        See Also:
            To enable/disable pipe collision
            :meth:`NodeGraph.set_pipe_collision`

        Returns:
            bool: True if pipe collision is enabled.
        """
        ...

    def set_pipe_collision(self, mode=...):
        """
        Enable/Disable pipe collision.

        When enabled dragging a node over a pipe will allow the node to be
        inserted as a new connection between the pipe.

        See Also:
            :meth:`NodeGraph.pipe_collision`

        Args:
            mode (bool): False to disable pipe collision.
        """
        ...

    def pipe_slicing(self):
        """
        Returns if pipe slicing is enabled.

        See Also:
            To enable/disable pipe slicer
            :meth:`NodeGraph.set_pipe_slicing`

        Returns:
            bool: True if pipe slicing is enabled.
        """
        ...

    def set_pipe_slicing(self, mode=...):
        """
        Enable/Disable pipe slicer.

        When set to true holding down ``Alt + Shift + LMB Drag`` will allow node
        pipe connections to be sliced.

        .. image:: _images/slicer.png
            :width: 400px

        See Also:
            :meth:`NodeGraph.pipe_slicing`

        Args:
            mode (bool): False to disable the slicer pipe.
        """
        ...

    def pipe_style(self):
        """
        Returns the current pipe layout style.

        See Also:
            :meth:`NodeGraph.set_pipe_style`

        Returns:
            int: pipe style value. :attr:`QtGraphology.constants.PipeLayoutEnum`
        """
        ...

    def set_pipe_style(self, style=...):
        """
        Set node graph pipes to be drawn as curved `(default)`, straight or angled.

        .. code-block:: python
            :linenos:

            graph = NodeGraph()
            graph.set_pipe_style(PipeLayoutEnum.CURVED.value)

        See: :attr:`QtGraphology.constants.PipeLayoutEnum`

        .. image:: _images/pipe_layout_types.gif
            :width: 80%


        Args:
            style (int): pipe layout style.
        """
        ...

    def layout_direction(self):
        """
        Return the current node graph layout direction.

        `Implemented in` ``v0.3.0``

        See Also:
            :meth:`NodeGraph.set_layout_direction`

        Returns:
            int: layout direction.
        """
        ...

    def set_layout_direction(self, direction):
        """
        Sets the node graph layout direction to horizontal or vertical.
        This function will also override the layout direction on all
        nodes in the current node graph.

        `Implemented in` ``v0.3.0``

        **Layout Types:**

        - :attr:`QtGraphology.constants.LayoutDirectionEnum.HORIZONTAL`
        - :attr:`QtGraphology.constants.LayoutDirectionEnum.VERTICAL`

        .. image:: _images/layout_direction_switch.gif
            :width: 300px

        Warnings:
            This function does not register to the undo stack.

        See Also:
            :meth:`NodeGraph.layout_direction`,
            :meth:`NodeObject.set_layout_direction`

        Args:
            direction (int): layout direction.
        """
        ...

    def fit_to_selection(self):
        """
        Sets the zoom level to fit selected nodes.
        If no nodes are selected then all nodes in the graph will be framed.
        """
        ...

    def reset_zoom(self):
        """
        Reset the zoom level
        """
        ...

    def set_zoom(self, zoom=...):
        """
        Set the zoom factor of the Node Graph the default is ``0.0``

        Args:
            zoom (float): zoom factor (max zoom out ``-0.9`` / max zoom in ``2.0``)
        """
        ...

    def get_zoom(self):
        """
        Get the current zoom level of the node graph.

        Returns:
            float: the current zoom level.
        """
        ...

    def center_on(self, nodes=...):
        """
        Center the node graph on the given nodes or all nodes by default.

        Args:
            nodes (list[QtGraphology.BaseNode]): a list of nodes.
        """
        ...

    def center_selection(self):
        """
        Centers on the current selected nodes.
        """
        ...

    def registered_nodes(self):
        """
        Return a list of all node types that have been registered.

        See Also:
            To register a node :meth:`NodeGraph.register_node`

        Returns:
            list[str]: list of node type identifiers.
        """
        ...

    def register_node(self, node, alias=...):
        """
        Register the node to the :meth:`NodeGraph.node_factory`

        Args:
            node (QtGraphology.NodeObject): node object.
            alias (str): custom alias name for the node type.
        """
        ...

    def register_nodes(self, nodes):
        """
        Register the nodes to the :meth:`NodeGraph.node_factory`

        Args:
            nodes (list[QtGraphology.NodeObject]): list of nodes.
        """
        ...

    def create_node(self, node_type, name=..., selected=..., color=..., text_color=..., pos=..., push_undo=...):
        """
        Create a new node in the node graph.

        See Also:
            To list all node types :meth:`NodeGraph.registered_nodes`

        Args:
            node_type (str): node instance type.
            name (str): set name of the node.
            selected (bool): set created node to be selected.
            color (tuple or str): node color ``(255, 255, 255)`` or ``"#FFFFFF"``.
            text_color (tuple or str): text color ``(255, 255, 255)`` or ``"#FFFFFF"``.
            pos (list[int, int]): initial x, y position for the node (default: ``(0, 0)``).
            push_undo (bool): register the command to the undo stack. (default: True)

        Returns:
            BaseNode: the created instance of the node.
        """
        ...

    def add_node(self, node, pos=..., selected=..., push_undo=...):
        """
        Add a node into the node graph.
        unlike the :meth:`NodeGraph.create_node` function this will not
        trigger the :attr:`NodeGraph.node_created` signal.

        Args:
            node (QtGraphology.BaseNode): node object.
            pos (list[float]): node x,y position. (optional)
            selected (bool): node selected state. (optional)
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def delete_node(self, node, push_undo=...):
        """
        Remove the node from the node graph.

        Args:
            node (QtGraphology.BaseNode): node object.
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def remove_node(self, node, push_undo=...):
        """
        Remove the node from the node graph.

        unlike the :meth:`NodeGraph.delete_node` function this will not
        trigger the :attr:`NodeGraph.nodes_deleted` signal.

        Args:
            node (QtGraphology.BaseNode): node object.
            push_undo (bool): register the command to the undo stack. (default: True)

        """
        ...

    def delete_nodes(self, nodes, push_undo=...):
        """
        Remove a list of specified nodes from the node graph.

        Args:
            nodes (list[QtGraphology.BaseNode]): list of node instances.
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def extract_nodes(self, nodes, push_undo=..., prompt_warning=...):
        """
        Extract select nodes from it connections.

        Args:
            nodes (list[QtGraphology.BaseNode]): list of node instances.
            push_undo (bool): register the command to the undo stack. (default: True)
            prompt_warning (bool): prompt warning dialog box.
        """
        ...

    def all_nodes(self):
        """
        Return all nodes in the node graph.

        Returns:
            list[QtGraphology.BaseNode]: list of nodes.
        """
        ...

    def selected_nodes(self):
        """
        Return all selected nodes that are in the node graph.

        Returns:
            list[QtGraphology.BaseNode]: list of nodes.
        """
        ...

    def select_all(self):
        """
        Select all nodes in the node graph.
        """
        ...

    def clear_selection(self):
        """
        Clears the selection in the node graph.
        """
        ...

    def invert_selection(self):
        """
        Inverts the current node selection.
        """
        ...

    def get_node_by_id(self, node_id=...):
        """
        Returns the node from the node id string.

        Args:
            node_id (str): node id (:attr:`NodeObject.id`)

        Returns:
            QtGraphology.NodeObject: node object.
        """
        ...

    def get_node_by_name(self, name):
        """
        Returns node that matches the name.

        Args:
            name (str): name of the node.
        Returns:
            QtGraphology.NodeObject: node object.
        """
        ...

    def get_nodes_by_type(self, node_type):
        """
        Return all nodes by their node type identifier.
        (see: :attr:`QtGraphology.NodeObject.type_`)

        Args:
            node_type (str): node type identifier.

        Returns:
            list[QtGraphology.NodeObject]: list of nodes.
        """
        ...

    def get_unique_name(self, name):
        """
        Creates a unique node name to avoid having nodes with the same name.

        Args:
            name (str): node name.

        Returns:
            str: unique node name.
        """
        ...

    def current_session(self):
        """
        Returns the file path to the currently loaded session.

        Returns:
            str: path to the currently loaded session
        """
        ...

    def clear_session(self):
        """
        Clears the current node graph session.
        """
        ...

    def purge_session(self):
        """
        Similar to :meth:`NodeGraph.clear_session` but ensure the QGraphicsItem
        is removed from the scene to avoid Windows fatal exception when exiting the
        PySide application (likely from items not properly garbage collected).

        This method is not undoable.

        """
        ...

    def serialize_session(self):
        """
        Serializes the current node graph layout to a dictionary.

        See Also:
            :meth:`NodeGraph.deserialize_session`,
            :meth:`NodeGraph.save_session`,
            :meth:`NodeGraph.load_session`

        Returns:
            dict: serialized session of the current node layout.
        """
        ...

    def deserialize_session(self, layout_data):
        """
        Load node graph session from a dictionary object.

        See Also:
            :meth:`NodeGraph.serialize_session`,
            :meth:`NodeGraph.load_session`,
            :meth:`NodeGraph.save_session`

        Args:
            layout_data (dict): dictionary object containing a node session.
        """
        ...

    def save_session(self, file_path):
        """
        Saves the current node graph session layout to a `JSON` formatted file.

        See Also:
            :meth:`NodeGraph.serialize_session`,
            :meth:`NodeGraph.deserialize_session`,
            :meth:`NodeGraph.load_session`,

        Args:
            file_path (str): path to the saved node layout.
        """
        ...

    def load_session(self, file_path):
        """
        Load node graph session layout file.

        See Also:
            :meth:`NodeGraph.deserialize_session`,
            :meth:`NodeGraph.serialize_session`,
            :meth:`NodeGraph.save_session`

        Args:
            file_path (str): path to the serialized layout file.
        """
        ...

    def import_session(self, file_path):
        """
        Import node graph session layout file.

        Args:
            file_path (str): path to the serialized layout file.
        """
        ...

    def copy_nodes(self, nodes=...):
        """
        Copy nodes to the clipboard.

        See Also:
            :meth:`NodeGraph.cut_nodes`

        Args:
            nodes (list[QtGraphology.BaseNode]):
                list of nodes (default: selected nodes).
        """
        ...

    def cut_nodes(self, nodes=...):
        """
        Cut nodes to the clipboard.

        Note:
            This function doesn't trigger the
            :attr:`NodeGraph.nodes_deleted` signal.

        See Also:
            :meth:`NodeGraph.copy_nodes`

        Args:
            nodes (list[QtGraphology.BaseNode]):
                list of nodes (default: selected nodes).
        """
        ...

    def paste_nodes(self):
        """
        Pastes nodes copied from the clipboard.

        Returns:
            list[QtGraphology.BaseNode]: list of pasted node instances.
        """
        ...

    def duplicate_nodes(self, nodes):
        """
        Create duplicate copy from the list of nodes.

        Args:
            nodes (list[QtGraphology.BaseNode]): list of nodes.
        Returns:
            list[QtGraphology.BaseNode]: list of duplicated node instances.
        """
        ...

    def disable_nodes(self, nodes, mode=...):
        """
        Toggle nodes to be either disabled or enabled state.

        See Also:
            :meth:`NodeObject.set_disabled`

        Args:
            nodes (list[QtGraphology.BaseNode]): list of nodes.
            mode (bool): (optional) override state of the nodes.
        """
        ...

    def use_OpenGL(self):
        """
        Set the viewport to use QOpenGLWidget widget to draw the graph.
        """
        ...

    def auto_layout_nodes(self, nodes=..., down_stream=..., start_nodes=...):
        """
        Auto layout the nodes in the node graph.

        Note:
            If the node graph is acyclic then the ``start_nodes`` will need
            to be specified.

        Args:
            nodes (list[QtGraphology.BaseNode]): list of nodes to auto layout
                if nodes is None then all nodes is layed out.
            down_stream (bool): false to layout up stream.
            start_nodes (list[QtGraphology.BaseNode]):
                list of nodes to start the auto layout from (Optional).
        """
        ...

    def question_dialog(self, text, title=...):
        """
        Prompts a question open dialog with ``"Yes"`` and ``"No"`` buttons in
        the node graph.

        Note:
            Convenience function to
            :meth:`NodeGraph.viewer().question_dialog`

        Args:
            text (str): question text.
            title (str): dialog window title.

        Returns:
            bool: true if user clicked yes.
        """
        ...

    def message_dialog(self, text, title=...):
        """
        Prompts a file open dialog in the node graph.

        Note:
            Convenience function to
            :meth:`NodeGraph.viewer().message_dialog`

        Args:
            text (str): message text.
            title (str): dialog window title.
        """
        ...

    def load_dialog(self, current_dir=..., ext=...):
        """
        Prompts a file open dialog in the node graph.

        Note:
            Convenience function to
            :meth:`NodeGraph.viewer().load_dialog`

        Args:
            current_dir (str): path to a directory.
            ext (str): custom file type extension (default: ``"json"``)

        Returns:
            str: selected file path.
        """
        ...

    def save_dialog(self, current_dir=..., ext=...):
        """
        Prompts a file save dialog in the node graph.

        Note:
            Convenience function to
            :meth:`NodeGraph.viewer().save_dialog`

        Args:
            current_dir (str): path to a directory.
            ext (str): custom file type extension (default: ``"json"``)

        Returns:
            str: selected file path.
        """
        ...

    @property
    def is_root(self):
        """
        Returns if the node graph controller is the root graph.

        Returns:
            bool: true is the node graph is root.
        """
        ...

    @property
    def sub_graphs(self):
        """
        Returns expanded group node sub graphs.

        Returns:
            dict: {<node_id>: <sub_graph>}
        """
        ...

    def expand_group_node(self, node):
        """
        Expands a group node session in a new tab.

        Args:
            node (QtGraphology.GroupNode): group node.

        Returns:
            SubGraph: sub node graph used to manage the group node session.
        """
        ...

    def collapse_group_node(self, node):
        """
        Collapse a group node session tab and it's expanded child sub graphs.

        Args:
            node (QtGraphology.GroupNode): group node.
        """
        ...



class SubGraph(NodeGraph):
    """
    The ``SubGraph`` class is just like the ``NodeGraph`` but is the main
    controller for managing the expanded node graph for a
    :class:`QtGraphology.GroupNode`.

    .. inheritance-diagram:: QtGraphology.SubGraph
        :top-classes: PySide6.QtCore.QObject

    .. image:: _images/sub_graph.png
        :width: 70%

    -
    """
    def __init__(self, parent=..., node=..., node_factory=..., **kwargs) -> None:
        """
        Args:
            parent (object): object parent.
            node (GroupNode): group node related to this sub graph.
            node_factory (NodeFactory): override node factory.
            **kwargs (dict): additional kwargs.
        """
        ...

    def __repr__(self):
        ...

    @property
    def is_root(self):
        """
        Returns if the node graph controller is the main root graph.

        Returns:
            bool: true is the node graph is root.
        """
        ...

    @property
    def sub_graphs(self):
        """
        Returns expanded group node sub graphs.

        Returns:
            dict: {<node_id>: <sub_graph>}
        """
        ...

    @property
    def initialized_graphs(self):
        """
        Returns a list of the sub graphs in the order they were initialized.

        Returns:
            list[QtGraphology.SubGraph]: list of sub graph objects.
        """
        ...

    @property
    def widget(self):
        """
        The sub graph widget from the top most sub graph.

        Returns:
            SubGraphWidget: node graph widget.
        """
        ...

    @property
    def navigation_widget(self):
        """
        The navigation widget from the top most sub graph.

        Returns:
            NodeNavigationWidget: navigation widget.
        """
        ...

    @property
    def subviewer_widget(self):
        """
        The widget to the sub graph.

        Returns:
            PySide6.QtWidgets.QWidget: node graph widget.
        """
        ...

    @property
    def parent_graph(self):
        """
        The parent node graph controller.

        Returns:
            QtGraphology.NodeGraph or QtGraphology.SubGraph: parent graph.
        """
        ...

    @property
    def node(self):
        """
        Returns the parent node to the sub graph.

        .. image:: _images/group_node.png
            :width: 250px

        Returns:
            QtGraphology.GroupNode: group node.
        """
        ...

    def delete_node(self, node, push_undo=...):
        """
        Remove the node from the node sub graph.

        Note:
            :class:`.PortInputNode` & :class:`.PortOutputNode` can't be deleted
            as they are connected to a :class:`.Port` to remove these port nodes
            see :meth:`BaseNode.delete_input`, :meth:`BaseNode.delete_output`.

        Args:
            node (QtGraphology.BaseNode): node object.
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def delete_nodes(self, nodes, push_undo=...):
        """
        Remove a list of specified nodes from the node graph.

        Args:
            nodes (list[QtGraphology.BaseNode]): list of node instances.
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def collapse_graph(self, clear_session=...):
        """
        Collapse the current sub graph and hide its widget.

        Args:
            clear_session (bool): clear the current session.
        """
        ...

    def expand_group_node(self, node):
        """
        Expands a group node session in current sub view.

        Args:
            node (QtGraphology.GroupNode): group node.

        Returns:
            SubGraph: sub node graph used to manage the group node session.
        """
        ...

    def collapse_group_node(self, node):
        """
        Collapse a group node session and it's expanded child sub graphs.

        Args:
            node (QtGraphology.GroupNode): group node.
        """
        ...

    def get_input_port_nodes(self):
        """
        Return all the port nodes related to the group node input ports.

        .. image:: _images/port_in_node.png
            :width: 150px

        -

        See Also:
            :meth:`NodeGraph.get_nodes_by_type`,
            :meth:`SubGraph.get_output_port_nodes`

        Returns:
            list[QtGraphology.PortInputNode]: input nodes.
        """
        ...

    def get_output_port_nodes(self):
        """
        Return all the port nodes related to the group node output ports.

        .. image:: _images/port_out_node.png
            :width: 150px

        -

        See Also:
            :meth:`NodeGraph.get_nodes_by_type`,
            :meth:`SubGraph.get_input_port_nodes`

        Returns:
            list[QtGraphology.PortOutputNode]: output nodes.
        """
        ...

    def get_node_by_port(self, port):
        """
        Returns the node related to the parent group node port object.

        Args:
            port (QtGraphology.Port): parent node port object.

        Returns:
            PortInputNode or PortOutputNode: port node object.
        """
        ...
