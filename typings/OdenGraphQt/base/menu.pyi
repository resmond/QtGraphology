"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
class NodeGraphMenu:
    """
    The ``NodeGraphMenu`` is the main context menu triggered from the node graph.

    .. inheritance-diagram:: QtGraphology.NodeGraphMenu
        :parts: 1

    example for accessing the node graph context menu.

    .. code-block:: python
        :linenos:

        from QtGraphology import NodeGraph

        node_graph = NodeGraph()

        # get the context menu for the node graph.
        context_menu = node_graph.get_context_menu('graph')

    """
    def __init__(self, graph, qmenu) -> None:
        ...

    def __repr__(self):
        ...

    @property
    def qmenu(self):
        """
        The underlying QMenu.

        Returns:
            BaseMenu: menu object.
        """
        ...

    def name(self):
        """
        Returns the name for the menu.

        Returns:
            str: label name.
        """
        ...

    def get_items(self):
        """
        Return the menu items in the order they were added.

        Returns:
            list: current menu items.
        """
        ...

    def get_menu(self, name):
        """
        Returns the child menu by name.

        Args:
            name (str): name of the menu.

        Returns:
            QtGraphology.NodeGraphMenu: menu item.
        """
        ...

    def get_command(self, name):
        """
        Returns the child menu command by name.

        Args:
            name (str): name of the command.

        Returns:
            QtGraphology.NodeGraphCommand: context menu command.
        """
        ...

    def add_menu(self, name):
        """
        Adds a child menu to the current menu.

        Args:
            name (str): menu name.

        Returns:
            QtGraphology.NodeGraphMenu: the appended menu item.
        """
        ...

    def add_command(self, name, func=..., shortcut=...):
        """
        Adds a command to the menu.

        Args:
            name (str): command name.
            func (function): command function e.g. "func(``graph``)".
            shortcut (str): shortcut key.

        Returns:
            QtGraphology.NodeGraphCommand: the appended command.
        """
        ...

    def add_separator(self):
        """
        Adds a separator to the menu.
        """
        ...



class NodesMenu(NodeGraphMenu):
    """
    The ``NodesMenu`` is the context menu triggered from a node.

    .. inheritance-diagram:: QtGraphology.NodesMenu
        :parts: 1

    example for accessing the nodes context menu.

    .. code-block:: python
        :linenos:

        from QtGraphology import NodeGraph

        node_graph = NodeGraph()

        # get the nodes context menu.
        nodes_menu = node_graph.get_context_menu('nodes')
    """
    def add_command(self, name, func=..., node_type=..., node_class=..., shortcut=...):
        """
        Re-implemented to add a command to the specified node type menu.

        Args:
            name (str): command name.
            func (function): command function e.g. "func(``graph``, ``node``)".
            node_type (str): specified node type for the command.
            node_class (class): specified node class for the command.
            shortcut (str): shortcut key.

        Returns:
            QtGraphology.NodeGraphCommand: the appended command.
        """
        ...



class NodeGraphCommand:
    """
    Node graph menu command.

    .. inheritance-diagram:: QtGraphology.NodeGraphCommand
        :parts: 1

    """
    def __init__(self, graph, qaction, func=...) -> None:
        ...

    def __repr__(self):
        ...

    @property
    def qaction(self):
        """
        The underlying qaction.

        Returns:
            GraphAction: qaction object.
        """
        ...

    @property
    def slot_function(self):
        """
        The function executed by this command.

        Returns:
            function: command function.
        """
        ...

    def name(self):
        """
        Returns the name for the menu command.

        Returns:
            str: label name.
        """
        ...

    def set_shortcut(self, shortcut=...):
        """
        Sets the shortcut key combination for the menu command.

        Args:
            shortcut (str): shortcut key.
        """
        ...

    def run_command(self):
        """
        execute the menu command.
        """
        ...

    def set_enabled(self, state):
        """
        Sets the command to either be enabled or disabled.

        Args:
            state (bool): true to enable.
        """
        ...

    def set_hidden(self, hidden):
        """
        Sets then command item visibility in the context menu.

        Args:
            hidden (bool): true to hide the command item.
        """
        ...

    def show(self):
        """
        Set the command to be visible in the context menu.
        """
        ...

    def hide(self):
        """
        Set the command to be hidden in the context menu.
        """
        ...
