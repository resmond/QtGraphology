"""
This type stub file was generated by pyright.
"""

class NodeFactory:
    """
    Node factory that stores all the node types.
    """
    def __init__(self) -> None:
        ...

    @property
    def names(self): # -> dict[Any, Any]:
        """
        Return all currently registered node type identifiers.

        Returns:
            dict: key=<node name, value=node_type
        """
        ...

    @property
    def aliases(self): # -> dict[Any, Any]:
        """
        Return aliases assigned to the node types.

        Returns:
            dict: key=alias, value=node type
        """
        ...

    @property
    def nodes(self): # -> dict[Any, Any]:
        """
        Return all registered nodes.

        Returns:
            dict: key=node identifier, value=node class
        """
        ...

    def create_node_instance(self, node_type=...): # -> None:
        """
        create node object by the node type identifier or alias.

        Args:
            node_type (str): node type or optional alias name.

        Returns:
            QtGraphology.NodeObject: new node object.
        """
        ...

    def register_node(self, node, alias=...): # -> None:
        """
        register the node.

        Args:
            node (QtGraphology.NodeObject): node object.
            alias (str): custom alias for the node identifier (optional).
        """
        ...

    def clear_registered_nodes(self): # -> None:
        """
        clear out registered nodes, to prevent conflicts on reset.
        """
        ...
