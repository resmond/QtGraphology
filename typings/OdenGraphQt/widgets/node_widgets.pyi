"""
This type stub file was generated by pyright.
"""

from PySide6 import QtGui, QtWidgets

"""
This type stub file was generated by pyright.
"""
class _NodeGroupBox(QtWidgets.QGroupBox):
    def __init__(self, label: str, parent=...) -> None:
        ...

    def setTitle(self, text: str):
        ...

    def setTitleAlign(self, align=...):
        ...

    def add_node_widget(self, widget: QtWidgets.QWidget):
        ...

    def get_node_widget(self) -> QtWidgets.QWidget:
        ...



class NodeBaseWidget(QtWidgets.QGraphicsProxyWidget):
    """
    This is the main wrapper class that allows a ``QtWidgets.QWidget`` to be
    added in a :class:`QtGraphology.BaseNode` object.

    .. inheritance-diagram:: QtGraphology.NodeBaseWidget
        :parts: 1

    Args:
        parent (QtGraphology.BaseNode.view): parent node view.
        name (str): property name for the parent node.
        label (str): label text above the embedded widget.
    """
    value_changed = ...
    def __init__(self, parent=..., name=..., label=...) -> None:
        ...

    def setToolTip(self, tooltip):
        ...

    def on_value_changed(self, *args, **kwargs):
        """
        This is the slot function that
        Emits the widgets current :meth:`NodeBaseWidget.value` with the
        :attr:`NodeBaseWidget.value_changed` signal.

        Args:
            args: not used.
            kwargs: not used.

        Emits:
            str, object: <node_property_name>, <node_property_value>
        """
        ...

    @property
    def type_(self):
        """
        Returns the node widget type.

        Returns:
            str: widget type.
        """
        ...

    @property
    def node(self):
        """
        Returns the node object this widget is embedded in.
        (This will return ``None`` if the widget has not been added to
        the node yet.)

        Returns:
            QtGraphology.BaseNode: parent node.
        """
        ...

    def get_icon(self, name):
        """
        Returns the default icon from the Qt framework.

        Returns:
            str: icon name.
        """
        ...

    def get_name(self):
        """
        Returns the parent node property name.

        Returns:
            str: property name.
        """
        ...

    def set_name(self, name):
        """
        Set the property name for the parent node.

        Important:
            The property name must be set before the widget is added to
            the node.

        Args:
            name (str): property name.
        """
        ...

    def get_value(self):
        """
        Returns the widgets current value.

        You must re-implement this property to if you're using a custom widget.

        Returns:
            str: current property value.
        """
        ...

    def set_value(self, text):
        """
        Sets the widgets current value.

        You must re-implement this property to if you're using a custom widget.

        Args:
            text (str): new text value.
        """
        ...

    def get_custom_widget(self):
        """
        Returns the embedded QWidget used in the node.

        Returns:
            QtWidgets.QWidget: nested QWidget
        """
        ...

    def set_custom_widget(self, widget):
        """
        Set the custom QWidget used in the node.

        Args:
            widget (QtWidgets.QWidget): custom.
        """
        ...

    def get_label(self):
        """
        Returns the label text displayed above the embedded node widget.

        Returns:
            str: label text.
        """
        ...

    def set_label(self, label=...):
        """
        Sets the label text above the embedded widget.

        Args:
            label (str): new label ext.
        """
        ...



class NodeComboBox(NodeBaseWidget):
    """
    Displays as a ``QComboBox`` in a node.

    .. inheritance-diagram:: QtGraphology.widgets.node_widgets.NodeComboBox
        :parts: 1

    .. note::
        `To embed a` ``QComboBox`` `in a node see func:`
        :meth:`QtGraphology.BaseNode.add_combo_menu`
    """
    def __init__(self, parent=..., name=..., label=..., items=...) -> None:
        ...

    @property
    def type_(self):
        ...

    def get_value(self):
        """
        Returns the widget current text.

        Returns:
            str: current text.
        """
        ...

    def set_value(self, text=...):
        ...

    def add_item(self, item):
        ...

    def add_items(self, items=...):
        ...

    def all_items(self):
        ...

    def sort_items(self, reversed=...):
        ...

    def clear(self):
        ...



class NodeLineEdit(NodeBaseWidget):
    """
    Displays as a ``QLineEdit`` in a node.

    .. inheritance-diagram:: QtGraphology.widgets.node_widgets.NodeLineEdit
        :parts: 1

    .. note::
        `To embed a` ``QLineEdit`` `in a node see func:`
        :meth:`QtGraphology.BaseNode.add_text_input`
    """
    def __init__(self, parent=..., name=..., label=..., text=..., placeholder_text=...) -> None:
        ...

    @property
    def type_(self):
        ...

    def get_value(self):
        """
        Returns the widgets current text.

        Returns:
            str: current text.
        """
        ...

    def set_value(self, text=...):
        """
        Sets the widgets current text.

        Args:
            text (str): new text.
        """
        ...



class NodeCheckBox(NodeBaseWidget):
    """
    Displays as a ``QCheckBox`` in a node.

    .. inheritance-diagram:: QtGraphology.widgets.node_widgets.NodeCheckBox
        :parts: 1

    .. note::
        `To embed a` ``QCheckBox`` `in a node see func:`
        :meth:`QtGraphology.BaseNode.add_checkbox`
    """
    def __init__(self, parent=..., name=..., label=..., text=..., state=...) -> None:
        ...

    @property
    def type_(self):
        ...

    def get_value(self):
        """
        Returns the widget checked state.

        Returns:
            bool: checked state.
        """
        ...

    def set_value(self, state=...):
        """
        Sets the widget checked state.

        Args:
            state (bool): check state.
        """
        ...



class _LineEditValidatorCheckBox(QtWidgets.QWidget):
    def __init__(self, parent: NodeLineEditValidatorCheckBox) -> None:
        ...

    def set_tool_btn(self, func, icon: QtGui.QIcon = ..., tooltip: str = ...):
        ...

    def set_validator(self):
        ...



class NodeLineEditValidatorCheckBox(NodeBaseWidget):
    def __init__(self, widget_name: str, pattern: str, placeholder=..., tooltip=..., is_case_sensitive=..., checkbox_label=..., widget_label=..., checkbox_visible=..., tool_btn_visible=..., parent=...) -> None:
        ...

    @property
    def type_(self):
        ...

    def get_custom_widget(self) -> _LineEditValidatorCheckBox:
        ...

    def wire_signals(self):
        ...

    def set_checkbox_visible(self, state: bool):
        ...

    def set_tool_btn_visible(self, state: bool):
        ...

    def get_value(self):
        ...

    def set_value(self, value):
        ...
